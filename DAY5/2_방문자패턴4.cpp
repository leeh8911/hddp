// 방문자 패턴의 의미!!
class Shape
{
	virtual void Draw() = 0;
	virtual void Move() = 0; // <== 추가
};
class Rect : public Shape {};
class Circle : public Shape {};

// 전통적인 객체지향 디자인 - ? 자리에 (1). 쉽다  (2). 어렵다 로 채워 보세요.

// 클래스의 추가    : 쉽다 ( 다형성기반으로 잘설계되어 있다면)
//					"p->Draw()" Triangle 이 추가되어도 이코드는 수정되지 않는다.


// 가상 함수의 추가 : 어렵다. 기존에 만든 모든 도형 클래스가 전부 수정되어야 한다.

// 그런데. 가상함수로 할일을 방문자로 만들면 어떨까 ?
ShapeMoveVisitor smv; // 도형을 이동하는 일을 하는 방문자
v.Accept(&smv);		  // v 안에 있는 모든 도형이 이동

// 방문자 패턴을 사용하는 시스템은!!

// 클래스의 추가 : 어렵다.	(방문자의 인터페이스가 수정된다.)
//						기존에 만든 모든 방문자를 수정해야 한다.
// 
// 가상함수의 추가 : 쉽다.(진짜 가상함수의 추가가 아니라..
//					    가상함수가 하는 일을 방문자로 한다는 의미)






